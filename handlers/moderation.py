import logging
from datetime import datetime
from aiogram import Dispatcher
from aiogram.types import CallbackQuery
from db import db
from config import CHANNEL_ID, OWNER_ID
from utils.state import state_manager
from utils.helpers import send_to_channel

logger = logging.getLogger(__name__)

def register_moderation_handlers(dp: Dispatcher, bot):
    @dp.callback_query()
    async def callback(callback_query: CallbackQuery):
        try:
            if callback_query.from_user.id != OWNER_ID:
                await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return

            try:
                action, msg_id_str = callback_query.data.split(":")
                msg_id = int(msg_id_str)
                data = state_manager.ideas_cache.get(msg_id)
                
                if not data:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
                    return
            except (ValueError, KeyError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
                await callback_query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return

            uid = data["user_id"]
            first = data.get("first_name", "")
            last = data.get("last_name", "")
            uname = f"{first} {last}".strip() or data.get("username", "") or "–±–µ–∑ –∏–º–µ–Ω–∏"
            text = data["text"]
            content_type = data["content_type"]
            file_id = data["file_id"]
            anonymous = data.get("anonymous", False)

            mention = f"{uname or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"

            if action == "approve":
                try:
                    if anonymous:
                        anon_caption = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–Ω–æ–Ω–∏–º–Ω–æ:\n{text}"
                        if content_type == "album":
                            await bot.send_media_group(CHANNEL_ID, media=file_id)
                            await bot.send_message(CHANNEL_ID, anon_caption, parse_mode="HTML")
                        elif content_type == "text":
                            await bot.send_message(CHANNEL_ID, anon_caption, parse_mode="HTML")
                        else:
                            send_map = {
                                "photo": bot.send_photo,
                                "video": bot.send_video,
                                "audio": bot.send_audio,
                                "voice": bot.send_voice,
                                "document": bot.send_document,
                                "animation": bot.send_animation
                            }
                            send_func = send_map.get(content_type, bot.send_message)
                            if content_type == "text":
                                await send_func(CHANNEL_ID, anon_caption, parse_mode="HTML")
                            elif file_id:
                                await send_func(CHANNEL_ID, file_id, caption=anon_caption, parse_mode="HTML")
                    else:
                        if content_type == "album":
                            await bot.send_media_group(CHANNEL_ID, media=file_id)
                            await bot.send_message(CHANNEL_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {mention}:\n{text}", parse_mode="HTML")
                        else:
                            await send_to_channel(bot, content_type, file_id, text, mention)
                    
                    await callback_query.message.edit_reply_markup()
                    await callback_query.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)

            elif action == "idea":
                try:
                    if db.save_idea(uid, uname, text, datetime.now().isoformat()):
                        await callback_query.message.edit_reply_markup()
                        await callback_query.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É üí°")
                    else:
                        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏: {e}")
                    await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

            elif action == "reject":
                try:
                    await callback_query.message.edit_reply_markup()
                    await callback_query.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ üö´")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            state_manager.ideas_cache.pop(msg_id, None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await callback_query.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", show_alert=True)
            except:
                pass